# vim: noet cms=#%s

#    ____  .__   __
#   / ___\ |__|_/  |_
#  / /_/  >|  |\   __\
#  \___  / |  | |  |
# /_____/  |__| |__|
# FIGMENTIZE: git

# This is a file with some global configurations for Git. The usual way to
# change the options here is to use $ git config, but it's also fine to just
# edit by hand.

# If this file breaks, git can refuse to run due to "bad config", so be wary of
# that if you're hacking around in here.

[user]
	# Obviously, these bits probably don't apply to you, unless you're me, in which
	# case - hi me!
	email = izaak.van.dongen@gmail.com
	name = Izaak van Dongen
[credential]
	# Store credentials for github etc in plain text. This is probably quite
	# bad, but it's easy, so hey, who cares
	helper = store
[merge]
	tool = vimdiff
[core]
	excludesfile = ~/.gitignore
[alias]
	c = commit -v
	ca = commit -v --all
	co = checkout
	st = status --show-stash
	# consistent with the existence of `git rm`, `git mv`, etc
	ls = ls-files
	unstage = reset HEAD --
	unchange = checkout --
	a = add
	aa = add --all
	au = add --update
	unadd = rm --cached
	# this is an aliases that expands to a shell command. You can use $1 etc
	# inside the command and then finish the command with a # to ignore the
	# supplied arguments.
	grephistory = "!git rev-list --all | xargs git grep"
	# git is surprisingly clever here - the git ls-files knows to use the bare
	# repository when it's cfg.
	figmentize = "!git ls-files -z | xargs -0 -n1 figmentize"
	# edit files and add them afterwards, because typing two commands is for
	# nerds
	vim = "!cd -- \"${GIT_PREFIX:-.}\"; \"$EDITOR\" \"$@\"; git add \"$@\" #"
	# open all files that have names matching some regex. Can be used to open
	# all files, if given no argument. Intricacy where you have to reattach
	# /dev/tty to vim if using it through xargs. Its arguments are just grep
	# arguments, so you can pass flags and expressions.
	grepvim = "!git ls-files -z | grep -Zzi \"$@\" | xargs -0 bash -c '</dev/tty \"$EDITOR\"\"$@\"' #"
	# open all files that have content matching some regex. Same protocal as
	# vimgrep.
	vimgrep = "!git grep -liz \"$@\" | xargs -0 bash -c '</dev/tty \"$EDITOR\" \"$@\"' #"
	sm-add-existing = "!cd -- \"${GIT_PREFIX:-.}\"; git submodule add -b master \"$(cd -- \"$1\"; git remote get-url origin)\" \"$1\" #"
	sm-reattach = "submodule foreach 'git checkout master'"
	sm-status = "submodule foreach 'git status'"
