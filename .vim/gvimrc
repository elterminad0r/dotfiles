"    ____         .__
"   / ___\ ___  __|__|  _____ _______   ____
"  / /_/  >\  \/ /|  | /     \\_  __ \_/ ___\
"  \___  /  \   / |  ||  Y Y  \|  | \/\  \___
" /_____/    \_/  |__||__|_|  /|__|    \___  >
"                           \/             \/
" FIGMENTIZE: gvimrc

" GVimrc that tries to make gvim look at much like my terminal as possible.

" Set some generic font for GVim, particularly we care about the font size.
" Only set it once because for some reason the screen messes itself up if you
" set it again.
command ResetFont set guifont=Liberation\ Mono\ for\ Powerline\ 12

if (!exists("g:goedel_set_font")) || !g:goedel_set_font
    ResetFont
    let g:goedel_set_font=1
endif

nnoremap g<C-l> <C-l>:redraw!<CR>

" binding to change font size
nnoremap <Leader>f :set guifont=*<CR>

" Allow increasing/decreasing the font size
function! IncreaseFontSize() abort
    let &guifont = substitute(
     \ &guifont,
     \ '\d\+',
     \ '\=eval(submatch(0)+1)',
     \ '')
endfunction

function! DecreaseFontSize() abort
    let &guifont = substitute(
     \ &guifont,
     \ '\d\+',
     \ '\=max([1, eval(submatch(0)-1)])',
     \ '')
endfunction

nmap <Leader>F <SID>(fresize)
nmap <script> <SID>(fresize)- :call DecreaseFontSize()<CR><SID>(fresize)
nmap <script> <SID>(fresize)+ :call IncreaseFontSize()<CR><SID>(fresize)
nmap <script> <SID>(fresize)= :ResetFont<CR><SID>(fresize)
nmap <script> <SID>(fresize) <Nop>

let g:goedel_gui_is_up = 1
function! ToggleGUI() abort
    if g:goedel_gui_is_up
        " same as default guioptions, but without tabs, scrollbars, menus or
        " toolbars.
        set guioptions=agitc
    else
        set guioptions&
    endif
    let g:goedel_gui_is_up = !g:goedel_gui_is_up
endfunction
call ToggleGUI()
nnoremap <F7> :call ToggleGUI()<CR>
inoremap <F7> <C-o>:call ToggleGUI()<CR>

let g:goedel_cursor_is_blinking = 1
function! ToggleBlinking() abort
    if g:goedel_cursor_is_blinking
        " same as default options but turn off blinking
        set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,ve:ver35-Cursor-blinkon0,o:hor50-Cursor-blinkon0,i-ci:ver25-Cursor/lCursor-blinkon0,r-cr:hor20-Cursor/lCursor-blinkon0,sm:block-Cursor-blinkon0
    else
        set guicursor&
    endif
    let g:goedel_cursor_is_blinking = !g:goedel_cursor_is_blinking
endfunction
call ToggleBlinking()
nnoremap <F8> :call ToggleBlinking()<CR>
inoremap <F8> <C-o>:call ToggleBlinking()<CR>

" allow the use of select mode, which is more like a Microsoft windows
" selection.
set selectmode=mouse,key

" set transparency if possible
if executable("transset-df")
    " remap this to work with a proper non-terminal
    " mnemonic: toggle Transparency
    nnoremap yot :silent exec "!transset-df -a -t 0.97"<CR><C-L>
endif

" basically, because gvim is supposed to be the friendly one
unmap <Left>
unmap <Right>
unmap <Up>
unmap <Down>
" because these aren't mapped, but are needed for temporary mappings with
" ultisnips
" iunmap <Left>
" iunmap <Right>
iunmap <Up>
iunmap <Down>
