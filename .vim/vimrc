"        .__
" ___  __|__|  _____ _______   ____
" \  \/ /|  | /     \\_  __ \_/ ___\
"  \   / |  ||  Y Y  \|  | \/\  \___
"   \_/  |__||__|_|  /|__|    \___  >
"                  \/             \/
" FIGMENTIZE: vimrc

" note to self ":set rl": this is funny, eg do:
" :autocmd BufWinEnter * set rl
" :autocmd CmdWinEnter * set rl
" similarly,
"   set columns=12: smash everything into 12 columns
"                   doesn't work so well on tiling WMs
"   set revins: you write backwards
"   silent !
" a nice combination is :set rl ri<CR>:sil !
" also, :noremap! a b| noremap! b a
" .. etc
" 10000gs
" ggg?G

" TODO: insert-mode mapping to close the innermost unclosed delimiter.
" TODO: text object for a filename, as in <cfile> maybe
" TODO: add mnemonic comments to mappings where appropriate
" TODO: generally see how unimpaired does things, and maybe move on
" TODO: make a proper little mode for toggling things, with a menu

" undoing wrapping with something like
" https://stackoverflow.com/questions/5651454/vim-join-all-lines-in-paragraph
" :set tw=1000000
" gggqG

set encoding=utf-8

" leave the heathens to their folly
if v:progname =~? "evim"
    finish
endif

" Use space as the leader key. This key is used by plugins, and by you, to make
" custom longer mappings. By default it's set to be \ (backslash) which is
" frankly terrible. Space is much faster to type
noremap <Space> <Nop>
let mapleader = ' '
noremap g<Space> <Space>
" To see what kind of mappings there are with it, issue :map <Leader>

" colour-related options, wrapped in some conditions just to be on the safe side
if &t_Co > 2 || has("gui_running")
    syntax enable
    " do not set hlsearch if it is already set, as this will annoyingly
    " re-highlight searches if you've set :noh
    if !&hlsearch
        set hlsearch
    endif
    " when I open a hacked together light terminal, use a light colorscheme.
    " I have this back here already so that background is expose to plugins
    if $GOEDEL_COLORSCHEME ==# "light"
        set background=light
    else
        set background=dark
    endif
endif

" Source the sub-rc files for various components
source ~/.vim/plugin.vim
source ~/.vim/options.vim
source ~/.vim/digraphs.vim
source ~/.vim/mappings.vim
source ~/.vim/command.vim

" show hex characters as codes
function! ToggleUHex() abort
    if &display =~# "uhex"
        set display-=uhex
    else
        set display+=uhex
    endif
endfunction

" Toggle all the crap I put in my columns, proxied by the number option. Written
" in such a way that it does not break if I change my default options.
if !exists("g:columns_are_on")
    let g:columns_are_on = 1
endif
function! ToggleColumn() abort
    if &number
        let g:columns_are_on = 0
        windo setlocal nonumber norelativenumber foldcolumn=0
    else
        let g:columns_are_on = 1
        windo setlocal number< relativenumber< foldcolumn<
    endif
endfunction

augroup SetColumns
    autocmd! BufWinEnter *
                \ if g:columns_are_on |
                \     setlocal number< relativenumber< foldcolumn< |
                \ else |
                \     setlocal nonumber norelativenumber foldcolumn=0 |
                \ endif
augroup END

" some hacky functionality to toggle search highlighting
if !exists("g:goedel_highlighted")
    let g:goedel_highlighted = 1
endif

" noh doesn't work from inside functions, so I use feedkeys instead. This is
" probably pretty fragile or dangerous or whatever but who cares
" TODO: make this cleverer about buffers & rehighlighting when you search
function! ToggleHighlight() abort
    if &hlsearch
        if g:goedel_highlighted
            call feedkeys(":nohlsearch\<CR>")
        else
            call feedkeys(":set hlsearch\<CR>")
        endif
        let g:goedel_highlighted = !g:goedel_highlighted
    endif
endfunction

" Insert mode version
function! IToggleHighlight() abort
    if &hlsearch
        call feedkeys("\<C-o>")
        call ToggleHighlight()
    endif
endfunction

" colour related options that have to happen after sourcing plugins
if &t_Co > 2 || has("gui_running")
    if &term != "linux"
        " if the solarized colorscheme exists, load it
        try
            " TODO: provide default colorscheme with not too objectionable
            "       highlighting of cursorcolumn, cursorline, line numbers and
            "       bad spellings.
            set termguicolors
            colorscheme gruvbox
            " TODO: is there any way to make the background transparent? this
            "       way breaks airline:
            " highlight Normal ctermbg=None
            " make special keycodes like ^S legible
            highlight! link SpecialKey Special
            " makes it so I can see what I'm highlighting TODO this gets broken
            " by termguicolors
            " highlight Visual cterm=reverse ctermbg=None
        catch /^Vim\%((\a\+)\)\=:E185/
            colorscheme default
        endtry
    endif
endif

" make useful directories in ~/.vim where they don't exist

call mkdir($HOME . "/.vim", "p")
for dirname in split("backups bundle sessions sessions/auto swap spell undo view")
    call mkdir($HOME . "/.vim/" . dirname, "p")
endfor

" Basically, let vim load plugins for filetypes.
" This is pretty essential to any vim user's quality of life
" Technically speaking vim-plug already does this for me. however i don't have
" the presence of mind to remember to reinstate this should I grow tired of
" vim-plug, so it stays.
filetype plugin indent on

" similarly name and shame trailing whitespace
highlight TrailingWhitespace ctermbg=red guibg=red
augroup TrailingWhitespaceMatch
    autocmd! VimEnter,WinEnter * match TrailingWhitespace /\s\+$/
augroup END

" nab cwd before autochdir kicks in, for session-writing porpoises
if !exists("g:goedel_vim_start_directory")
    let g:goedel_vim_start_directory = getcwd()
endif

" Automatically write session files. They are both uniquely identified with a
" timestamp, and stored in a directory structure mirroring the actual directory
" the session was written in.
" I have a script "revim" in ~/bin to reopen the last session either from the
" current directory, a given directory or globally. This is more powerful than
" what you'd get using viminfo, as it can sort of restore tabs and window
" splits.
function! GoedelWriteSession() abort
    let l:goedel_sess = "~/.vim/sessions/auto" . g:goedel_vim_start_directory
                \ . "/" . strftime("%s") . ".vim"
    call mkdir(fnamemodify(l:goedel_sess, ':p:h'), "p")
    execute "mksession " . l:goedel_sess
    echomsg "wrote session " . l:goedel_sess
endfunction

augroup AutoSession
    autocmd! VimLeavePre * call GoedelWriteSession()
augroup end

function XYZ() abort
    abc
endfunction

" generating and using ctags
if executable("ctags")
    " Tags Recursive
    function! MakeTagsR() abort
        silent !echo "runnning ctags in $(pwd)"; ctags -R -o .tags.new; mv -f .tags.new .tags
        redraw!
    endfunction
    " Tags Flat
    function! MakeTagsF() abort
        silent !echo "runnning ctags in $(pwd)"; ctags -o .tags.new *; mv -f .tags.new .tags
        redraw!
    endfunction
else
    function! MakeTagsR() abort
        echoerr "ctags executable not found"
    endfunction
    function! MakeTagsF() abort
        echoerr "ctags executable not found"
    endfunction
endif

call XYZ()

nnoremap <silent> <Leader>c :call MakeTagsR()<CR>
nnoremap <silent> <Leader>C :call MakeTagsF()<CR>

function! GoedelCheckSearch() abort
    if !empty($GOEDEL_VIMACK_SEARCH)
        let @/ = $GOEDEL_VIMACK_SEARCH
        silent! normal! n
        call feedkeys(":set hlsearch\<CR>")
        let g:goedel_highlighted = 1
    endif
endfunction

function! GoedelToggleSearch() abort
    if !empty($GOEDEL_VIMACK_SEARCH)
        let g:goedel_vimack_search_store = $GOEDEL_VIMACK_SEARCH
        let $GOEDEL_VIMACK_SEARCH = ''
    else
        if exists("g:goedel_vimack_search_store")
            let $GOEDEL_VIMACK_SEARCH = g:goedel_vimack_search_store
            call GoedelCheckSearch()
        else
            echohl ErrorMsg
            echo "Goedel search does not appear to have been initialised"
            echohl None
        endif
    endif
endfunction

augroup SearchGoedelPattern
    autocmd! BufWinEnter * call GoedelCheckSearch()
augroup END

" workaround because you can't redefine a running function.
" This means that if this function is modified, YOU MUST EXIT VIM
if !exists("*ReloadVimConf")
    function! ReloadVimConf() abort
        source $MYVIMRC
        if has("gui_running")
            source $MYGVIMRC
        endif
        call plug#load(keys(g:plugs))
        redraw | echo "reloaded " . $MYVIMRC
        doautoall VimEnter
        " Fix local working directories in current, For some reason this is
        " broken by the VimEnter autocmd event, although it should be fixed in
        " other windows on account of autochdir, so I don't need windo
        lcd %:p:h
        " Re-run filetype detection to reset local options
        filetype detect
    endfunction
endif

" " reload vimrc when written. Disabled because it's annoying
" augroup ConfigReloadVim
"     " the nested makes things not break - see autocmd-nested
"     autocmd! BufWritePost ~/.vim/*rc,~/.vim/*vim nested call ReloadVimConf()
" augroup END

function! ReloadTmuxConf() abort
    !tmux source-file %
    redraw | echo "reloaded " . @%
endfunction
augroup ConfigReloadTmux
    autocmd! BufWritePost ~/.tmux.conf call ReloadTmuxConf()
augroup END

function! ReloadXConf() abort
    !xrdb -merge %
    redraw | echo "reloaded ". @%
endfunction
augroup ConfigReloadX
    " TODO: match ~/.X/* not recursively (see :h autocmd-patterns)
    autocmd! BufWritePost ~/.Xresources,~/.Xdefaults,~/.X/* call ReloadXConf()
augroup END

function! ReloadI3Conf() abort
    !i3-msg restart
    redraw | echo "reloaded " . @%
endfunction
augroup ConfigReloadI3
    autocmd! BufWritePost ~/.config/i3/config,~/.config/i3status/config,~/.conkyrc,~/.config/i3blocks/config call ReloadI3Conf()
augroup END

function! ToggleAmbiwidth() abort
    if &ambiwidth ==# "single"
        set ambiwidth=double
    else
        set ambiwidth=single
    endif
endfunction

" mnemonic: emoji
nnoremap yoe :call ToggleAmbiwidth()<CR>
