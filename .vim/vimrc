" FIGMENTIZE: 'vimrc'
"        .__
" ___  __|__|  _____ _______   ____
" \  \/ /|  | /     \\_  __ \_/ ___\
"  \   / |  ||  Y Y  \|  | \/\  \___
"   \_/  |__||__|_|  /|__|    \___  >
"                  \/             \/

" note to self ":set rl": this is funny, eg do:
" :autocmd BufWinEnter * set rl
" :autocmd CmdWinEnter * set rl
" similarly,
"   set columns=12: smash everything into 12 columns
"                   doesn't work so well on tiling WMs
"   set revins: you write backwards
"   silent !
" a nice combination is :set rl ri<CR>:sil !
" also, :noremap! a b| noremap! b a
" .. etc

" TODO: insert-mode mapping to close the innermost unclosed delimiter.
" TODO: text object for a filename, as in <cfile> maybe
" TODO: add mnemonic comments to mappings where appropriate

" TODO: why does zsh indent comments by a tab

" delete all previous autocmds. This is probably pure paranoia but the horrors
" I've endured...
" FIXME: clear functions, commands, mappings?
" this also breaks plugins, I think. Whoops!
" autocmd!
" mapclear

" leave the heathens to their folly
if v:progname =~? "evim"
    finish
endif

" Use space as the leader key. This key is used by plugins, and by you, to make
" custom longer mappings. By default it's set to be \ (backslash) which is
" frankly terrible. Space is much faster to type
map <Space> <Nop>
let mapleader = ' '
" To see what kind of mappings there are with it, issue :map <Leader>

" Source the sub-rc files for various components
source ~/.vim/pluginrc
source ~/.vim/optionsrc
source ~/.vim/mappingsrc
source ~/.vim/commandrc

" colour-related options, wrapped in some conditions just to be on the safe side
if &t_Co > 2 || has("gui_running")
    syntax enable
    " FIXME: after reloading vimrc, all searches get re-highlighted because of
    " this, I think. (maybe to do with viminfo?)
    set hlsearch
    set background=dark
    if &term != "linux"
        let g:solarized_termtrans = 1
        " TODO guard against solarized not existing
        "      provide default colorscheme with not too objectionable
        "      highlighting of cursorcolumn, cursorline, line numbers and bad
        "      spellings.
        colorscheme solarized
    endif
    " makes it so I can see what I'm highlighting
    highlight Visual cterm=reverse ctermbg=NONE
endif

" make useful directories in ~/.vim where they don't exist

" make directory if it does not exist
function! MkDirP(dirname)
    if !isdirectory(a:dirname)
        echomsg "mkdir" a:dirname
        call mkdir(a:dirname)
    endif
endfunction

call MkDirP($HOME . "/.vim")
for dirname in split("backups bundle sessions swap spell undo view")
    call MkDirP($HOME . "/.vim/" . dirname)
endfor

" Basically, let vim load plugins for filetypes.
" This is pretty essential to any vim user's quality of life
" Technically speaking vim-plug already does this for me. however i don't have
" the presence of mind to remember to reinstate this should I grow tired of
" vim-plug, so it stays.
filetype plugin indent on

" similarly name and shame trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
augroup ExtraWhitespaceMatch
    autocmd! VimEnter,WinEnter * match ExtraWhitespace /\s\+$/
augroup END

" generating and using ctags
if executable("ctags")
    function! MakeTags()
        silent !echo "runnning ctags in $(pwd)"; ctags -R -o newtags; mv -f newtags tags
        redraw!
    endfunction
else
    function! MakeTags()
        echoerr "ctags executable not found"
    endfunction
endif

nnoremap <silent> <Leader>c :call MakeTags()<CR>

" workaround because you can't redefine a running function.
" This means that if this function is modified, YOU MUST EXIT VIM
if !exists("*ReloadVimConf")
    function! ReloadVimConf()
        source $MYVIMRC
        if has("gui_running")
            source $MYGVIMRC
        endif
        call plug#load(keys(g:plugs))
        redraw | echo "reloaded " . $MYVIMRC
    endfunction
endif
" reload vimrc when written
augroup ConfigReloadVim
    " the nested makes things not break - see autocmd-nested
    autocmd! BufWritePost ~/.vim/*rc nested call ReloadVimConf()
augroup END

function! ReloadTmuxConf()
    !tmux source-file %
    redraw | echo "reloaded " . @%
endfunction
augroup ConfigReloadTmux
    autocmd! BufWritePost ~/.tmux.conf call ReloadTmuxConf()
augroup END

function! ReloadXConf()
    !xrdb merge %
    redraw | echo "reloaded ". @%
endfunction
augroup ConfigReloadX
    autocmd! BufWritePost ~/.Xresources,~/.Xdefaults call ReloadXConf()
augroup END

function! ReloadI3Conf()
    !i3-msg restart
    redraw | echo "reloaded " . @%
endfunction
augroup ConfigReloadI3
    autocmd! BufWritePost ~/.config/i3/config,~/.config/i3status/config,~/.conkyrc,~/.config/i3blocks/config call ReloadI3Conf()
augroup END
