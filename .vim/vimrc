" My vimrc file

" note to self ":set rl": this is funny

" delete all previous autocmds. This is probably pure paranoia but the horrors
" I've endured...
autocmd!

" Powerline configuration - with Arch's powerline
let g:powerline_pycmd="py3"
set laststatus=2
" Always display the tabline, even if there is only one tab
set showtabline=2
set noshowmode

" for some reason we should stop
if v:progname =~? "evim"
    finish
endif

" use this to manage plugins or something
execute pathogen#infect()
" generate help files
Helptags
" basically, let vim load plugins for filetypes.
" This is pretty essential to any vim user's quality of life
filetype plugin indent on
" tell vim-commentary what comments to use in tex files
augroup TexComments
    autocmd!
    autocmd FileType tex setlocal commentstring=%\ %s
augroup END
" tell vimtex i'm not a total nutjob
let g:tex_flavor = 'latex'

" TODO
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" Avoid side effects if `nocp` already set. THIS IS CRUCIALLY IMPORTANT
" Basically everything breaks if you don't do this
if &compatible
    set nocompatible
endif
" Let backspaces in insert mode delete lines, I think
set backspace=indent,eol,start
" remember 10000 lines of command-line history
set history=10000
" display current cursor position
set ruler
" display long normal-mode commands as they're typed
set showcmd
" show matches for a search live as you type them
set incsearch

" make <Esc> work without delay. This breaks any keybindings with <Esc> in them
" from insert mode, but who cares
set noesckeys

" colour-related options, wrapped in some conditions just to be on the safe side
if &t_Co > 2 || has("gui_running")
    syntax enable
    set hlsearch
    noh
    let g:solarized_termtrans = 1
    set background=dark
    colorscheme solarized
endif

" maybe this fixed something once, a long time ago
set autoindent
if has('langmap') && exists('+langnoremap')
    set langnoremap
endif
" Makes % more sophisticated
packadd matchit

" line numbers, that are relative to current line
" allegedly lets you judge repetitions of movement commands, and it looks cool
set number
set relativenumber
" whitespace
" tab = 4 spaces
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" name and shame any actual tabs
set list
set listchars=tab:>-

" similarly name and shame trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

" text width is 80 and mark it out
set textwidth=80
set colorcolumn=+1

" ignore case in search
set ignorecase
" completion becomes case insensitive if it can't find anything sensitive
set infercase
" backspace key fix?
set t_kb=
" set good encryption
set cryptmethod=blowfish2

" a bit of tough love
imap <LEFT> <nop>
imap <RIGHT> <nop>
imap <UP> <nop>
imap <DOWN> <nop>

" Am I crazy?? this makes much more sense. nG is used to go to line, ngg is used
" to go to character, G is EOF, gg is SOF, and g[oO] are these mad useful
" bindings
nnore go o<Esc>
nnore gO O<Esc>
nnore gg go<Esc>

" This is when vim does stuff with :find or something
set path=.,**
set wildmenu
set wildignorecase
set complete=.,w,b,u,t,i

" preserves undo history for buffers by not properly closing things
set hidden

" Persistent undo history
set undofile
set undodir=$HOME/.vim/undo

" save 10000 levels of undo
set undolevels=10000
" cache entire buffers under 10000 lines
set undoreload=10000

" auto-generate ctags when writing certain files
if executable("ctags")
    function MakeTags()
        " basically only try this when I'm inside my home directory a little
        " way.
        if getcwd() =~ "^" . $HOME . "/"
            redraw | echo "RUNNING CTAGS"
            silent !ctags -R -o newtags; mv -f newtags tags &
            redraw | echo "RAN CTAGS"
        endif
    endfunction
    augroup CTagsAutoWrite
        autocmd!
        autocmd BufWritePost *.py,*.c,*.cpp,*.h,*.tex call MakeTags()
    augroup END
    " tag binary search
    set tagbsearch
endif

" Write backup files. Disk is cheap and uou never know
set backup
set writebackup
set backupdir=~/.vim/backups

" Preserve vim state:
" '100: store marks for 100 previously edited files
" /100: store 100 previous searches
" :100: store 100 previous commands issued
" <1000000: store at most 1000000 lines of each buffer
" @1000: store 1000 lineso f input-line history
" s1000: allow items to be 10000 Kbyte in size
set viminfo=%,'100,/100,:100,<1000000,s10000,@1000,h,n~/.vim/viminfo

" Keep swap files out of the way
set directory^=~/.vim/swap

" Set up a thesaurus and dictionary
set thesaurus=~/.vim/thesaurus/thesaurus_pkg/thesaurus.txt
set spelllang=en_gb,nl spellcapcheck=
" Make files be "text" by default
augroup TextFileType
    autocmd!
    autocmd BufEnter * if &filetype == "" | setlocal ft=text | endif
augroup END
" Enable spelling for these filetypes
augroup SpellingFiles
    autocmd!
    autocmd FileType latex,tex,text,markdown set spell
augroup END

" Allow saving of files as sudo when I forgot to start vim using sudo.
command W w !sudo tee > /dev/null %

" reload configuration
command Vrc source $MYVIMRC
