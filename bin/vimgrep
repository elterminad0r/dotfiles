#!/usr/bin/env sh

# grep for a pattern in given files' _contents_, opening all files with a match
# in $EDITOR or vim.

set -eu

usage() {
    cat <<EOF
vimgrep [-h|--help] PATTERN FILE [FILE...]
Search for the regular expression PATTERN in the contents of given FILES.

Open any files with matching contents in \$EDITOR or vim.
EOF
}

# no need for anything so sophisticated as getopts. Furthermore, I like to be
# able to put -h after positional arguments.
for arg; do
    case "$arg" in
        "-h"|"--help")
            usage;
            exit 0;
            ;;
        "--")
            break;
            ;;
        "-"*)
            >&2 echo "unrecognised option: $arg";
            >&2 usage;
            exit 1;
            ;;
        *)
            ;;
    esac
done

if [ "$#" -le "1" ]; then
    >&2 echo "need files - did you want vimack?"
    >&2 usage
    exit 1
fi

pattern="$1"
shift

tmp_templ="${TMPDIR:-/tmp/}vimgrep/$USER.$(date '+%Y%m%d%H%M%S').XXXXXXXX"
mkdir -p "$(dirname "$tmp_templ")"
>/dev/null 2>&1 chmod a+rwxt "$(dirname "$tmp_templ")" || true
file_dump="$(mktemp "$tmp_templ")"

if grep --version | head -n 1 | grep -q GNU; then
    grep -liZ "$pattern" "$@" | \
        tee "$file_dump" | \
        GOEDEL_VIMACK_SEARCH="$pattern" vim-stdin -0
    echo "opened files:"
    < "$file_dump" xargs -0 printf '%s\n'
else
    >&2 echo "warning: grep not safe on newlines: hit Enter to continue"
    read -r
    grep -li "$pattern" "$@" | \
        tee "$file_dump" | \
        tr '\n' '\0' | \
        GOEDEL_VIMACK_SEARCH="$pattern" vim-stdin -0
    echo "opened files:"
    < "$file_dump" tr '\n' '\0' | xargs -0 printf '%s\n'
fi
