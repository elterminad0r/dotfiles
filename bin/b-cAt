#!/usr/bin/env python3

# ___.                      _____    __
# \_ |__           ____    /  _  \ _/  |_
#  | __ \  _______/ ___\  /  /_\  \\   __\
#  | \_\ \/_____/\  \___ /    |    \|  |
#  |___  /        \___  >\____|__  /|__|
#      \/             \/         \/
# FIGMENTIZE: b-cAt

"""
Script to sPoNgEbOb CaPiTaLiSe stdin, or files from argv.

Unbuffering will require Python 3.7.
"""

import sys

from functools import partial

import smartparse as argparse

from cApItAlIsE import CaPiTaLiSeR, RAnDOMCApItALiseR, HumANdomcaPITalisEr

def get_args():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("files", nargs="*", type=argparse.FileType("r"),
            help="files to cAt", default=[])
    parser.add_argument("-u", "--unbuffered", action="store_true",
            help="Reconfigure I/O objects to use line buffering")
    mode_group = parser.add_mutually_exclusive_group()
    mode_group.add_argument("-r", "--random", action="store_true",
            help="Use a random capitaliser instead")
    mode_group.add_argument("-t", "--truerandom", action="store_true",
            help="Use a true random capitaliser instead")
    mode_group.add_argument("-c", "--capital", action="store_true",
            help="Start on a capital letter")
    return parser.parse_args()

if __name__ == "__main__":
    args = get_args()
    files = args.files
    if args.unbuffered:
        sys.stdout.reconfigure(line_buffering=True)
    if args.random:
        cApItAlIsEr = HumANdomcaPITalisEr()
    elif args.truerandom:
        cApItAlIsEr = RAnDOMCApItALiseR()
    elif args.capital:
        cApItAlIsEr = CaPiTaLiSeR(True)
    else:
        cApItAlIsEr = CaPiTaLiSeR()
    # only cApItAlIsE stdin if no other arguments, just like proper cat.
    # Concatenate things with stdin using the `-` argument.
    if not files:
        files.append(sys.stdin)
    for file in files:
        with file:
            for line in file:
                sys.stdout.write(cApItAlIsEr.process(line))
