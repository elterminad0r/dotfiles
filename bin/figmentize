#!/usr/bin/env python3

# FIGMENTIZE: "Figmentize"
# ___________.__    ____                           __   .__
# \_   _____/|__|  / ___\  _____    ____    ____ _/  |_ |__|________  ____
#  |    __)  |  | / /_/  >/     \ _/ __ \  /    \\   __\|  |\___   /_/ __ \
#  |     \   |  | \___  /|  Y Y  \\  ___/ |   |  \|  |  |  | /    / \  ___/
#  \___  /   |__|/_____/ |__|_|  / \___  >|___|  /|__|  |__|/_____ \ \___  >
#      \/                      \/      \/      \/                 \/     \/

"""
This is a script I've written to automatically insert figlet ASCII art headers
into config files. This allows me to easily maintain a unified config file
header system, and whimsically switch between fonts.

It searches for tags like the one at the top of this file. Note that it will
replace the entire paragraph that the tag is in, so make sure that the tag has
an empty line either side of it.

If you have managed to destroy your files with this script, it should have saved
backups in ~/.figmentize/.
"""

import re
import subprocess
import shlex
import itertools

import sys
import time
import pathlib
import os.path
import smartparse as argparse
import json

def get_figlet_default():
    """
    Get figlet's default font directory
    """
    figlet = subprocess.run(["figlet", "-I", "2"],
            check=True, capture_output=True)
    return figlet.stdout.decode().strip()

# directory to store backup files in, relative to $HOME. This will be fed to a
# pathlib.Path
BACKUP_DIR = pathlib.Path.home() / pathlib.Path(".figmentize/backup")
# location of the figmentizerc file
CONFIG_FILE = (pathlib.Path.home() /
               pathlib.Path(".figmentize/figmentizerc.json"))
DEFAULT_CONFIG = {
        # by default, kern and disable wrapping.
        # TODO: this wrap width seems to work, and if you go much larger it
        # doesn't. Why?
        "flags": ["-k", "-w", "10000"],
        "font": "standard",
        "dir": get_figlet_default()}

def get_config():
    """
    Read the figmentizerc (located at CONFIG) to obtain default parameters.
    If it doesn't exist, write it with the defaults.
    """
    if not CONFIG_FILE.exists():
        write_defaults(CONFIG_FILE.open("w"))
        return DEFAULT_CONFIG
    with CONFIG_FILE.open("r") as figmentizerc:
        return json.load(figmentizerc)

def write_defaults(file):
    """
    Write default configuration to a file. (as pretty printed json)
    """
    print(f"writing default config to {file.name}", file=sys.stderr)
    with file:
        json.dump(DEFAULT_CONFIG, file, indent=4)

def dir_arg(s):
    """
    Check if an argparse argument is a valid directory
    """
    if not os.path.isdir(s):
        raise ValueError(f"Invalid directory: {s!r}")
    return s

def get_args():
    """
    Process argv
    """
    config = get_config()
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("file", type=argparse.FileType("r"),
            help="File to process")
    parser.add_argument("--font", type=str, default=config["font"],
            help="Figlet font to use")
    parser.add_argument("--dir", type=dir_arg,
            default=str(pathlib.Path(config["dir"]).expanduser()),
            help="Font directory to use")
    parser.add_argument("--flags", type=str,
            default=config["flags"],
            help="Figlet flags to use")
    parser.add_argument("--exec", type=str, nargs="+",
            help="Alternative command to run - overrides any figlet config")
    parser.add_argument("--nobackup", dest="backup", action="store_false",
            help="Don't make backups (not recommended)")
    parser.add_argument("--nooverwrite", dest="overwrite", action="store_false",
            help=("Don't overwrite the file, instead write the modified file to"
                  " stdout. For testing purposes mostly."))
    return parser.parse_args()

def make_command(args):
    """
    Make a constructor shell command from the given arguments
    """
    if args.exec:
        return args.exec
    return ["figlet", *args.flags, "-d", args.dir, "-f", args.font]

def read_pars(file):
    """
    Read paragraphs from file
    """
    contents = file.read()
    return contents.split("\n\n"), contents

#TODO: add support for flag/command overrides in a figmentize indicator
def match_head_par(par):
    """
    Check to see if the paragraph has a figlet heading indicator (that looks
    like the one at the top of this file)
    """
    # this is safe as split with an argument always returns a non-null list
    head, *_ = par.split("\n")
    return re.match("(.*?)FIGMENTI[ZS]E:\\s*['\"]?(.*?)['\"]?\\s*$", head)

def make_head(prefix, head, command, indicator):
    """
    Create an ASCII header given its text, a prefix, and a constructor shell
    command
    """
    run = [*command, head]
    print(f"running $ {' '.join(map(shlex.quote, run))}", file=sys.stderr)
    figlet = subprocess.run(run, check=True, capture_output=True)
    return "\n".join(itertools.chain((indicator,),
        ("{}{}".format(prefix, line).rstrip() for line in
            figlet.stdout.decode().rstrip().split("\n"))))

def process_file(file, command, backup, overwrite):
    """
    Process some file, replacing all heading indicator tags with ascii headers
    """
    print(f"Processing {file.name}")
    with file:
        pars, contents = read_pars(file)
    output = []
    modified = False
    for par in pars:
        match = match_head_par(par)
        if match:
            modified = True
            prefix = match.group(1)
            head = match.group(2)
            indicator = match.group(0)
            output.append(make_head(prefix, head, command, indicator))
        else:
            output.append(par)
    if modified:
        if backup:
            make_backup(os.path.abspath(file.name), contents)
        if overwrite:
            file = open(file.name, "w")
        else:
            file = sys.stdout
        # TODO: this is a little dangerous as it can close stdout. Might lead to
        # bugs
        with file:
            file.write("\n\n".join(output))

def ensure_backup_dir():
    """
    Create the backup directory if it does not exist
    """
    BACKUP_DIR.mkdir(parents=True, exist_ok=True)
    return BACKUP_DIR

def escape(filename):
    """
    Perform a sort of vim-like escaping of the file name, and add a timestamp
    """
    return (f"{filename.replace('%', '%%').replace('/', '%')}"
            f"_{time.time()}.backup")

def make_backup(filename, contents):
    """
    Make a backup of a file
    """
    backup_dir = ensure_backup_dir()
    backup_path = backup_dir / pathlib.Path(escape(filename))
    print(f"writing backup to {backup_path!s}", file=sys.stderr)
    with backup_path.open("w") as backup_file:
        backup_file.write(contents)

if __name__ == "__main__":
    args = get_args()
    command = make_command(args)
    process_file(args.file, command, args.backup, args.overwrite)
