#!/usr/bin/env sh

#        .__                           __
# ___  __|__|  _____  _____     ____  |  | __
# \  \/ /|  | /     \ \__  \  _/ ___\ |  |/ /
#  \   / |  ||  Y Y  \ / __ \_\  \___ |    <
#   \_/  |__||__|_|  /(____  / \___  >|__|_ \
#                  \/      \/      \/      \/
# FIGMENTIZE: vimack

# search recursively for a pattern in file contents *and* file names, and open
# matching files in $EDITOR or vim.

# The first argument, if present, is a regular expression (for whatever grep you
# have on your system) to search for in files.

# The second argument, if present, is a similar regular expression to filter
# file names by.

# If either one is empty, it will match everything, as expected.

# Aims to be mostly functional if you have only POSIX utilities.

# TODO: spread the love
#       write completions
#       detect binary files in the find strategy
#       functionality to re-process last dry run

set -eu

args_return_code=0

args_code="$(
argpar.sh "$(basename "$0")" -- "$@" << 'EOA'
parser.description = """\
Search for the (grep) regular expression content_pattern recursively in current
directory, in files with names matching (the grep regex) filename_pattern, if
given. An empty pattern matches everything.

Open any matching files in $EDITOR or vim.
"""

parser.epilog = """\
This script also passes the environment variable GOEDEL_VIMACK_SEARCH to the
editor (through the script vim-stdin). If given, it takes the value of
goedel_pattern, otherwise it becomes content_pattern. This allows you to adjust
for different regex engines if you're using complicated patterns. I have my Vim
set up to automatically jump to any matches (and I have a mapping to toggle
this behaviour). Basically it's up to you what you do with it.
"""

mode = parser.add_mutually_exclusive_group()
mode.add_argument("-d", "--dryrun", action="store_true",
        help='''Just list files, in a parse-able format. Can be thought of as
                setting $EDITOR to printf "%%s\\n" or printf "%%s\\0"''')
parser.add_argument("-0", action="store_true",
        help="Use null separators if using --dryrun")
parser.add_argument("-q", "--quote", action="store_true",
        help='''Use `printf "%%q\\n"` to print dryrun matches. This will
                require GNU printf, probably. This tries to use nulls inside the
                pipeline, but the output is always newline separated because %%q
                should be safe on newlines.''')
mode.add_argument("-l", "--list", action="store_true",
        help='''List files and matches, intended more for "checking" if you
                have the command right before going into your editor.''')
parser.add_argument("-i", "--ignorecase", action="store_true",
        help="Ignore case in file content searches.")
parser.add_argument("-I", "--fileignore", action="store_true",
        help="Ignore case in file name matching.")
parser.add_argument("--quiet", action="store_true",
        help="Don't complain about safety on newlines.")
strat_group = parser.add_mutually_exclusive_group()
for strat in "rg ag ack find git".split():
    strat_group.add_argument("--{}".format(strat), action="store_const",
                             dest="find_override", const=strat,
            help="Use the strategy '{}' to find files".format(strat))
parser.add_argument("content_pattern", nargs="?",
        help="Pattern to search for in file content.")
parser.add_argument("filename_pattern", nargs="?",
        help="Pattern to filter file names.")
parser.add_argument("goedel_pattern", nargs="?",
        help="Pattern to set $GOEDEL_VIMACK_SEARCH to.")

--------------------------------------------------------------------------------

if (vars(args)["0"] or args.quote) and not args.dryrun:
    parser.error("-0 and --quote may only be given with --dryrun")
EOA
)" || args_return_code="$?"



# help message was shown
if [ "$args_return_code" = "3" ]; then
    [ -n "$args_code" ] && printf "%s\n" "$args_code"
    exit 0
elif [ ! "$args_return_code" = "0" ]; then
    [ -n "$args_code" ] && printf "%s\n" "$args_code"
    exit "$args_return_code"
fi

# The default values. Grabbed from the output of argpar.sh, to stop shellcheck
# from complaining
arg_dryrun='False'
arg_0='False'
arg_quote='False'
arg_list='False'
arg_ignorecase='True'
arg_fileignore='True'
arg_quiet='False'

eval "$args_code"

# set some further defaults in case of certain arguments
if [ "$arg_0" = "True" ]; then
    arg_dryrun_nulls="True"
    arg_quiet="True"
fi

if [ "$arg_quote" = "True" ]; then
    arg_dryrun_nulls=true;
fi

arg_content_pattern="${arg_content_pattern-}"
arg_filename_pattern="${arg_filename_pattern-}"
arg_goedel_pattern="${arg_goedel_pattern-$arg_content_pattern}"

# https://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
if [ -z "${arg_find_override+x}" ]; then
    for com in rg ag ack find; do
        if >/dev/null 2>&1 command -v "$com"; then
            arg_find_override="$com"
            break
        fi
    done
    if [ -n "$arg_find_override" ]; then
        [ "$arg_quiet" = "false" ] && { printf "strategy: ";
                                        command -v "$arg_find_override"; } >&2
    else
        >&2 echo "could not find a suitable program for find_override"
        exit 1
    fi
fi

# make input as safe as possible for xargs to read with -0
# Of course, -0 isn't strictly POSIX, but what's a man supposed to do
xargs_safe() {
    if [ "$zero_mode" = "false" ] &&
       [ -n "$arg_filename_pattern" ]; then
        tr '\n' '\0'
    else
        cat
    fi
}

# Turn nulls back into newlines if needed.
display_safe() {
    if [ "$zero_mode" = "True" ]; then
        tr '\0' '\n'
    else
        cat
    fi
}

do_vimack() {
    if [ "$arg_ignorecase" = "True" ]; then
        icflags=-i
    else
        icflags=
    fi
    if [ "$arg_fileignore" = "True" ]; then
        ic_fileflags=-i
    else
        ic_fileflags=
    fi
    if ! grep --version | head -n 1 | grep -q GNU ||
       ! sort --version | head -n 1 | grep -q GNU &&
       [ -n "$arg_filename_pattern" ] ||
       [ "$arg_find_override" = "find" ]; then
        zero_mode=false
        rg_flags=
        ack_flags=
        git_flags=
        grep_in_flags=
        grep_out_flags=
        find_flags=
        sort_flags=
        if [ "$arg_quiet" = "false" ]; then
            >&2 echo "warning: grep not safe on newlines: hit Enter to continue"
            read -r
        fi
    else
        zero_mode=true
        rg_flags=-0
        ack_flags=--print0
        git_flags=-z
        grep_in_flags=-z
        grep_out_flags=-Z
        find_flags=-print0
        sort_flags=-z
    fi
    if [ "$arg_list" = "True" ]; then
        "${arg_find_override}_strategy_list"
    elif [ "$arg_dryrun" = "True" ]; then
        "${arg_find_override}_strategy_dry" |
            if [ "$arg_quote" = "True" ]; then
                if env printf --version |
                    head -n 1 | grep -q GNU; then
                    xargs_safe | xargs -0 env printf "%q\n"
                elif >/dev/null 2>&1 command bash; then
                    xargs_safe | xargs -0 bash -c 'printf "%q\n" "$@"' DUMMY
                else
                    >&2 echo "Can't find a suitable printf"
                    exit 1
                fi
            elif [ "$arg_dryrun_nulls" = "True" ]; then
                xargs_safe
            else
                xargs_safe | xargs -0 printf "%s\n"
            fi
    else
        "${arg_find_override}_strategy_dry" | xargs_safe |
            GOEDEL_VIMACK_SEARCH="$arg_goedel_pattern" vim-stdin -0
    fi
}

# grep if a pattern was given. Optionally, grep on $2 if $1 is not empty.
# Strategy functions may optionally choose to use this. It is obviously faster
# not to, but some utilities make it quite hard for you to filter files for
# them.
# The reason I don't want to just do meaningless greps is to be careful with
# newlines and nulls.
files_grep_dry() {
    if [ -n "$1" ]; then
        grep $ic_fileflags $grep_in_flags $grep_out_flags -- "${2-$1}"
    else
        cat
    fi
}

files_grep_list() {
    if [ -n "$1" ]; then
        grep $ic_fileflags $grep_in_flags -- "${2-$1}"
    else
        cat
    fi
}

# Generally wacky quoting throughout on purpose, so that we get word splitting

rg_strategy_dry() {
    rg -l $icflags $rg_flags -- "$arg_content_pattern" |
        files_grep_dry "$arg_filename_pattern"
}

# not robust on newlines, due to rg's weird output format
rg_strategy_list() {
    grep_in_flags=
    rg --color=ansi $icflags -- "$arg_content_pattern" |
        # wacky business to parse the ANSI codes from ripgrep
        # This is basically not at all guaranteed to be safe, but you really
        # shouldn't be putting ANSI SGR codes in your file names.
        files_grep_list "$arg_filename_pattern" \
                         "^.\\[0m.\\[3.m[^.]*${arg_filename_pattern}[^.]*.\\[0m:" |
        display_safe
}

ag_strategy_dry() {
    ag -l $icflags $rg_flags -- "$arg_content_pattern" |
        files_grep_dry "$arg_filename_pattern"
}

# similar problem to rg
ag_strategy_list() {
    grep_in_flags=
    ag $icflags --color -- "$arg_content_pattern" |
        files_grep_list "$arg_filename_pattern" \
                        "^.\\[1;3.m[^.]*${arg_filename_pattern}[^.]*.\\[0m.\\[K:" |
        display_safe
}

ack_strategy_dry() {
    ack -l $icflags $ack_flags -- "$arg_content_pattern" |
        files_grep_dry "$arg_filename_pattern"
}

ack_strategy_list() {
    ack $icflags $ack_flags --color -- "$arg_content_pattern" |
        files_grep_list "$arg_filename_pattern" \
                        "^.\\[1;3.m[^.]*${arg_filename_pattern}[^.]*.\\[0m:" |
        display_safe
}

# grep -I is not strictly POSIX, but it's in GNU and BSD grep so it's good
# enough for me.
find_strategy_dry() {
    find . -name .git -prune -o -type f $find_flags |
        files_grep_dry "$arg_filename_pattern" |
        xargs_safe  |
        xargs -0 grep -lI $icflags $grep_out_flags \
                         -- "$arg_content_pattern" |
        sort $sort_flags;
}

find_strategy_list() {
    find . -name .git -prune -o -type f $find_flags |
        files_grep_dry "$arg_filename_pattern" |
        xargs_safe  |
        xargs -0 grep -I --color=always $icflags \
                         -- "$arg_content_pattern"
}

git_strategy_dry() {
    git grep -lI $icflags $git_flags -- "$arg_content_pattern" |
        files_grep_dry "$arg_filename_pattern"
}

# also not safe on newlines
git_strategy_list() {
    grep_in_flags=
    git grep $icflags -I --color=always -- "$arg_content_pattern" |
        files_grep_list "$arg_filename_pattern" \
                       "^[^.]*${arg_filename_pattern}[^.]*.\\[3.m:" |
        display_safe
}

do_vimack
