#!/usr/bin/env sh

#    ____  .__   __                                           .___   .___                      .__           __   .__            ____
#   / ___\ |__|_/  |_       ______  _____         _____     __| _/ __| _/        ____  ___  ___|__|  _______/  |_ |__|  ____    / ___\
#  / /_/  >|  |\   __\     /  ___/ /     \  ______\__  \   / __ | / __ | _______/ __ \ \  \/  /|  | /  ___/\   __\|  | /    \  / /_/  >
#  \___  / |  | |  |       \___ \ |  Y Y  \/_____/ / __ \_/ /_/ |/ /_/ |/_____/\  ___/  >    < |  | \___ \  |  |  |  ||   |  \ \___  /
# /_____/  |__| |__|      /____  >|__|_|  /       (____  /\____ |\____ |        \___  >/__/\_ \|__|/____  > |__|  |__||___|  //_____/
#                              \/       \/             \/      \/     \/            \/       \/         \/                 \/
# FIGMENTIZE: git sm-add-existing

# Git subcommand to register an existing Git repository in the tree as a
# submodule.

set -eu

args_return_code=0

args_code="$(
argpar.sh "$(basename "$0")" -- "$@" << 'EOA'
parser.description = """\
Perform 'git submodule add' on the existing Git repository submodule, setting
the tracking branch to master on the remote repository at the location of the
origin remote within submodule.
"""

parser.add_argument("passthrough", nargs="+", metavar="submodule",
        help="Submodules to be added")
EOA
)" || args_return_code="$?"

# help message was shown
if [ "$args_return_code" = "3" ]; then
    [ -n "$args_code" ] && printf "%s\n" "$args_code"
    exit 0
elif [ ! "$args_return_code" = "0" ]; then
    [ -n "$args_code" ] && printf "%s\n" "$args_code"
    exit "$args_return_code"
fi

eval "$args_code"

for sm; do
    git submodule add -b master \
        "$(cd -- "$sm";
        git --git-dir=.git --work-tree=. remote get-url origin)" "$sm"
done
