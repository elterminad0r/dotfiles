#!/usr/bin/env sh

# _________ _____________________ .____           _________
# \_   ___ \\__    ___/\______   \|    |          \_   ___ \
# /    \  \/  |    |    |       _/|    |    ______/    \  \/
# \     \____ |    |    |    |   \|    |___/_____/\     \____
#  \______  / |____|    |____|_  /|_______ \       \______  /
#         \/                   \/         \/              \/
# FIGMENTIZE: CTRL-C

# TODO: wl-clipboard?

args_return_code=0

args_code="$(
argpar.sh "$(basename "$0")" -- "$@" << 'EOA'
parser.description = """\
Attempt to write the contents of stdin to the system clipboard, by trying to
figure out what system it's on and what executables are available. Should
certainly work on MacOS and X on Linux if you have one of the clipboard
interfaces installed (xclip, xsel).
"""
EOA
)" || args_return_code="$?"

# help message was shown
if [ "$args_return_code" = "1" ]; then
    [ -n "$args_code" ] && printf "%s\n" "$args_code"
    exit 0
elif [ ! "$args_return_code" = "0" ]; then
    [ -n "$args_code" ] && printf "%s\n" "$args_code"
    exit "$args_return_code"
fi

eval "$args_code"

case "$(uname -s)" in
    Darwin)
        pbcopy
        ;;
    Cygwin)
        cat > /dev/clipboard
        ;;
    *)
        if >/dev/null 2>&1 command -v xclip; then
            xclip -in -selection clipboard
        elif >/dev/null 2>&1 command -v xsel; then
            xsel --clipboard --input
        else
            >&2 echo "I'm not ready for this"
        fi
        ;;
esac
