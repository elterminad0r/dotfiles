#!/usr/bin/env python3

"""
This is a script that does some drawing with truecolor escape codes in the
terminal. It's a nice little exercise in using truecolor escape codes, and in
generating a colour wheel. It's also "useful" for testing the capabilities of
your current terminal. For example, the output breaks hilariously in URxvt, and
if you've got tmux set up to override truecolor, will look blocky in tmux. It
should look like a smooth colour wheel in a square pane that fits on the screen.

By default, it tries to take up about 90% of the screen in the relatively
shorter dimension.

If you stare into the centre of the pattern closely for a couple of seconds, and
then quickly switch to something with a white background (like a wall or a
browser), you're in for a trip.
"""

from colorsys import hsv_to_rgb
from math import pi, sqrt, atan2
from shutil import get_terminal_size

def get_dimensions():
    w, h = get_terminal_size()
    if w < h * 2:
        return w, w // 2
    return h * 2, h

WIDTH, HEIGHT = (int(0.9 * i) for i in get_dimensions())

# upper limit of distance from origin. +1 to be on the safe side
DIAG = sqrt((HEIGHT // 2 + 1) ** 2 + (WIDTH // 2 + 1) ** 2)

def get_rgb(x, y, diag):
    h = atan2(y, x) / (2 * pi) + 1
    s = sqrt(x ** 2 + y ** 2) / diag
    return (int(i * 255) for i in hsv_to_rgb(h, s, 1))

for y in range(-HEIGHT // 2, HEIGHT - HEIGHT // 2):
    for x in range(-WIDTH // 2, WIDTH - WIDTH // 2):
        # Print a unicode upper half-block. This means I can set the foreground
        # for one colour and the background for another, doubling my effective
        # vertical resolution.
        print("\x1b[38;2;{};{};{}m\x1b[48;2;{};{};{}mâ–€".format(
            *get_rgb(x, y, DIAG),
            *get_rgb(x, y + 0.5, DIAG)), end="")
    print("\x1b[0m")
print()
