#!/usr/bin/env sh

# Similar to vimack, except it's a Git subcommand that searches the Git
# repository.

set -eu

usage() {
    cat <<EOF
git vimack-exe [-h|--help] [CONTENT_PATTERN [FILENAME_PATTERN]]
Search for CONTENT_PATTERN recursively in current directory, in files with names
matching FILENAME_PATTERN, if given. An empty pattern matches everything.
EOF
}

# no need for anything so sophisticated as getopts. Furthermore, I like to be
# able to put -h after positional arguments.
for arg; do
    case "$arg" in
        "-h"|"--help")
            usage;
            exit 0;
            ;;
        "--")
            break;
            ;;
        "-"*)
            >&2 echo "unrecognised option: $arg";
            >&2 usage;
            exit 1;
            ;;
        *)
            ;;
    esac
done

content_pattern="${1:-}"
filename_pattern="${2:-}"

if grep --version | head -n 1 | grep -q GNU &&
   sort --version | head -n 1 | grep -q GNU; then
    grep_content_flags=-liZ
    grep_filename_flags=-iZz
    xargsflags=-0
    gitlsflags=-z
    sortflags=-z
else
    >&2 echo "warning: grep not safe on newlines: hit Enter to continue"
    read -r
    grep_content_flags=-li
    grep_filename_flags=-i
    xargsflags=-d'\n'
    gitlsflags=
    sortflags=
fi

file_dump="/tmp/git-vimack_$(date +%s)"

>&2 echo "searching in $PWD"

# wacky quoting on purpose, so empty variables are ignored
git ls-files $gitlsflags | \
    grep $grep_filename_flags "$filename_pattern" | \
    xargs $xargsflags grep $grep_content_flags "$content_pattern" | \
    sort $sortflags | \
    tee "$file_dump" | \
    GOEDEL_VIMACK_SEARCH="$content_pattern" vim-stdin $xargsflags

echo "opened files"
< "$file_dump" xargs $xargsflags printf '%q\n'
