#!/usr/bin/env sh

# Similar to vimack, except it's a Git subcommand that searches the Git
# repository.

set -eu

usage() {
    cat <<EOF
git vimack-exe [-h|--help] [CONTENT_PATTERN [FILENAME_PATTERN]]
Search for CONTENT_PATTERN recursively in current directory, in files with names
matching FILENAME_PATTERN, if given. An empty pattern matches everything.
EOF
}

# no need for anything so sophisticated as getopts. Furthermore, I like to be
# able to put -h after positional arguments.
for arg; do
    case "$arg" in
        "-h"|"--help")
            usage;
            exit 0;
            ;;
        "--")
            break;
            ;;
        "-"*)
            >&2 echo "unrecognised option: $arg";
            >&2 usage;
            exit 1;
            ;;
        *)
            ;;
    esac
done

content_pattern="${1:-}"
filename_pattern="${2:-}"

tmp_templ="/tmp/git-vimack/$USER.$(date '+%Y%m%d%H%M%S').XXXXXXXX"
mkdir -p "$(dirname "$tmp_templ")"
>/dev/null 2>&1 chmod a+rwxt "$(dirname "$tmp_templ")" || true
file_dump="$(mktemp "$tmp_templ")"

>&2 echo "searching in $PWD"

# list all git *files* (not submodules etc)
# https://stackoverflow.com/questions/40165650/how-to-list-all-files-tracked-by-git-excluding-submodules

if grep --version | head -n 1 | grep -q GNU &&
   sort --version | head -n 1 | grep -q GNU; then
    git grep -lz '' | \
        grep -izZ "$filename_pattern" | \
        xargs -0 grep -liZ "$content_pattern" | \
        sort -z | \
        tee "$file_dump" | \
        GOEDEL_VIMACK_SEARCH="$content_pattern" vim-stdin -0
    echo "opened files:"
    < "$file_dump" xargs $xargsflags printf '%s\n'
else
    >&2 echo "warning: grep not safe on newlines: hit Enter to continue"
    read -r
    git grep -l '' | \
        grep -i "$filename_pattern" | \
        tr '\n' '\0' | \
        xargs -0 grep -li "$content_pattern" | \
        sort | \
        tee "$file_dump" | \
        tr '\n' '\0' | \
        GOEDEL_VIMACK_SEARCH="$content_pattern" vim-stdin -0
    echo "opened files:"
    < "$file_dump" tr '\n' '\0' | xargs -0 printf '%s\n'
fi
