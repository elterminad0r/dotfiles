#!/usr/bin/env sh

# Similar to vimack, except it's a Git subcommand that searches the Git
# repository.

set -eu

usage() {
    cat <<EOF
git vimack-exe [OPTION...] [CONTENT_PATTERN [FILENAME_PATTERN [GOEDEL_PATTERN]]]
Search for CONTENT_PATTERN recursively in current directory, in files with names
matching FILENAME_PATTERN, if given. An empty pattern matches everything.

Open any matching files in \$EDITOR or vim.

Options:
-h, --help:       Show this message and exit
-d, --dryrun:     Just list files, in a parse-able format. Can be thought of as
                  setting \$EDITOR to printf "%s\\n" or printf "%s\\0"
-0:               Use null separators if using --dryrun
-l, --list:       List files and matches, intended more for "checking" if you
                  have the command right before going into your editor.
-i, --ignorecase: Ignore case in file content searches.
-I, --fileignore: Ignore case in file name matching.
-q, --quiet:      Don't complain about safety on newlines.

This script also passes the environment variable GOEDEL_VIMACK_SEARCH to the
editor (through the script vim-stdin). If given, it takes the value of
GOEDEL_PATTERN, otherwise it becomes CONTENT_PATTERN. This allows you to adjust
for different regex engines if you're using complicated patterns. I have my Vim
set up to automatically jump to any matches (and I have a mapping to toggle
this behaviour). Basically it's up to you what you do with it.
EOF
}

expand_arg() {
    case "$1" in
        "--"*)
            printf "%s" "$1"
            ;;
        "-"*)
            printf "%s" "$1" | fold -w1 | sed "s/^/-/"
            ;;
        *)
            printf "%s" "$1"
            ;;
    esac
}

# not using getopts, to some extent just to prove to myself that I don't need
# to. Furthermore I like have long arguments, and also options starting with two
# dashes. And letting options appear anywhere in the list.
# https://unix.stackexchange.com/questions/258512/how-to-remove-a-positional-parameter-from
# Using this to basically rotate through the argument list, only not rotating
# the options back round.
skip_remaining=false
dryrun=false
dryrun_nulls=false
list_files=false
quiet_mode=false
ignorecase=false
file_ignorecase=false
# TODO: this is unsafe on newlines in arguments
for _arg; do
    shift
    if [ "$skip_remaining" = "true" ]; then
        set -- "$@" "$_arg"
    else
        while IFS='' read -r arg; do
            case "$arg" in
                "-h"|"--help")
                    usage
                    exit 0
                    ;;
                "-d"|"--dryrun")
                    dryrun=true
                    ;;
                "-0")
                    dryrun_nulls=true
                    quiet_mode=true
                    ;;
                "-l"|"--list")
                    list_files=true
                    ;;
                "-i"|"--ignorecase")
                    ignorecase=true
                    ;;
                "-I"|"--fileignore")
                    file_ignorecase=true
                    ;;
                "-q"|"--quiet")
                    quiet_mode=true
                    ;;
                "--")
                    skip_remaining=true
                    ;;
                "-"*)
                    >&2 echo "unrecognised option: $arg"
                    >&2 usage
                    exit 1
                    ;;
                *)
                    set -- "$@" "$arg"
                    ;;
            esac
        done <<< "$(expand_arg "$_arg")"
    fi
done

content_pattern="${1:-}"
filename_pattern="${2:-}"
goedel_pattern="${3:-$content_pattern}"


>&2 echo "searching in $PWD"

# list all git *files* (not submodules etc)
# https://stackoverflow.com/questions/40165650/how-to-list-all-files-tracked-by-git-excluding-submodules

if grep --version | head -n 1 | grep -q GNU &&
   sort --version | head -n 1 | grep -q GNU; then
    git grep -liz "$filename_pattern" | \
        xargs -0 grep -liZ "$content_pattern" | \
        sort -z | \
        GOEDEL_VIMACK_SEARCH="$goedel_pattern" vim-stdin -0
else
    >&2 echo "warning: grep not safe on newlines: hit Enter to continue"
    read -r
    git grep -liz "$filename_pattern" | \
        xargs -0 grep -li "$content_pattern" | \
        sort | \
        tr '\n' '\0' | \
        GOEDEL_VIMACK_SEARCH="$goedel_pattern" vim-stdin -0
fi
